name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-14
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'
    
    - name: Show Xcode Version
      run: xcodebuild -version
    
    - name: Show Available Simulators
      run: xcrun simctl list devices available
    
    - name: Create Secrets Config
      run: |
        cat > Secrets.xcconfig << EOF
        PROCLAMATION_API_BASE_URL = https://www.proctrust.org.uk/api/resources
        ESV_API_KEY = mock_esv_key_for_ci
        TRANSCRIPTION_API_URL = https://transcription.example.com/v1
        TRANSCRIPTION_API_KEY = mock_transcription_key_for_ci
        PODCAST_FEED_URL = https://feeds.example.com/podcast.xml
        BLOG_FEED_URL = https://example.com/blog/feed.xml
        PUSH_SERVER_ENDPOINT = https://api.example.com/v1/push
        EOF
    
    - name: Clean Build Folder
      run: |
        cd "PT Resources"
        xcodebuild clean -project "PT Resources.xcodeproj" -scheme "PT Resources"
    
    - name: Build App
      run: |
        cd "PT Resources"
        xcodebuild build \
          -project "PT Resources.xcodeproj" \
          -scheme "PT Resources" \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.5' \
          -configuration Debug \
          ONLY_ACTIVE_ARCH=YES \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
    
    - name: Run Unit Tests
      run: |
        cd "PT Resources"
        xcodebuild test \
          -project "PT Resources.xcodeproj" \
          -scheme "PT Resources" \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.5' \
          -only-testing:PT_ResourcesTests \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
    
    - name: Run UI Tests
      run: |
        cd "PT Resources"
        xcodebuild test \
          -project "PT Resources.xcodeproj" \
          -scheme "PT Resources" \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.5' \
          -only-testing:PT_ResourcesUITests \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
    
    - name: Archive Build Logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          ~/Library/Logs/DiagnosticReports/
          ~/Library/Developer/Xcode/DerivedData/*/Logs/
        retention-days: 5

  validate-project:
    name: Validate Project Structure
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository  
      uses: actions/checkout@v4
    
    - name: Validate Required Files
      run: |
        echo "Checking project structure..."
        
        # Check main directories exist
        test -d "PT Resources/PT Resources/Models" || exit 1
        test -d "PT Resources/PT Resources/Services" || exit 1
        test -d "PT Resources/PT Resources/Views" || exit 1
        test -d "PT Resources/PT Resources/ViewModels" || exit 1
        test -d "PT Resources/PT Resources/Persistence" || exit 1
        test -d "PT Resources/PT Resources/Resources" || exit 1
        
        # Check key files exist
        test -f "PT Resources/PT Resources/Config.swift" || exit 1
        test -f "PT Resources/PT Resources/ContentView.swift" || exit 1
        test -f "PT Resources/PT Resources/PT_ResourcesApp.swift" || exit 1
        test -f "README.md" || exit 1
        
        # Check Core Data model exists
        test -d "PT Resources/PT Resources/Persistence/PTResources.xcdatamodeld" || exit 1
        
        echo "✅ All required files and directories found"
    
    - name: Validate README
      run: |
        echo "Validating README content..."
        grep -q "PT Resources iOS App" README.md || exit 1
        grep -q "Setup Instructions" README.md || exit 1
        grep -q "API Integration" README.md || exit 1
        echo "✅ README validation passed"
    
    - name: Check for TODO Markers
      run: |
        echo "Checking for production TODOs..."
        todo_count=$(grep -r "TODO:" PT\ Resources/ --include="*.swift" | wc -l)
        echo "Found $todo_count TODO markers for production configuration"
        
        # Ensure Config.swift has placeholder warnings
        grep -q "TODO:" "PT Resources/PT Resources/Config.swift" || exit 1
        echo "✅ Configuration TODOs verified"